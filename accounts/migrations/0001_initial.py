# Generated by Django 3.2.20 on 2023-10-21 18:06

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('branch', models.CharField(choices=[('CSE', 'Computer Science and Engineering'), ('ECE', 'Electronics and Communication Engineering'), ('ME', 'Mechanical Engineering'), ('CE', 'Civil Engineering'), ('CSEAIML', 'Computer Science and Engineering (AI/ML)'), ('CSEDS', 'Computer Science and Engineering (Data Science)'), ('IT', 'Information Technology'), ('CS', 'Computer Science'), ('AIML', 'Artificial Intelligence and Machine Learning'), ('CSIT', 'Computer Science and Information Technology'), ('EN', 'Electrical And Electronics Engineering'), ('CSEH', 'Computer Science and Engineering (Hindi)')], max_length=8)),
                ('semester', models.IntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3'), (4, 'Semester 4'), (5, 'Semester 5'), (6, 'Semester 6'), (7, 'Semester 7'), (8, 'Semester 8')])),
                ('course_code', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='StudentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roll_number', models.IntegerField(unique=True)),
                ('current_semester', models.IntegerField(choices=[(1, 'Semester 1'), (2, 'Semester 2'), (3, 'Semester 3'), (4, 'Semester 4'), (5, 'Semester 5'), (6, 'Semester 6'), (7, 'Semester 7'), (8, 'Semester 8')])),
                ('branch', models.CharField(choices=[('CSE', 'Computer Science and Engineering'), ('ECE', 'Electronics and Communication Engineering'), ('ME', 'Mechanical Engineering'), ('CE', 'Civil Engineering'), ('CSEAIML', 'Computer Science and Engineering (AI/ML)'), ('CSEDS', 'Computer Science and Engineering (Data Science)'), ('IT', 'Information Technology'), ('CS', 'Computer Science'), ('AIML', 'Artificial Intelligence and Machine Learning'), ('CSIT', 'Computer Science and Information Technology'), ('EN', 'Electrical And Electronics Engineering'), ('CSEH', 'Computer Science and Engineering (Hindi)')], max_length=8)),
                ('contact_number', models.IntegerField()),
                ('date_of_birth', models.DateField()),
                ('guardian_name', models.CharField(max_length=100)),
                ('guardian_contact_number', models.IntegerField()),
                ('courses', models.ManyToManyField(to='accounts.Course')),
            ],
        ),
        migrations.CreateModel(
            name='FacultyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_number', models.IntegerField()),
                ('date_of_birth', models.DateField()),
                ('department', models.CharField(choices=[('CSE', 'Computer Science and Engineering'), ('ECE', 'Electronics and Communication Engineering'), ('ME', 'Mechanical Engineering'), ('CE', 'Civil Engineering'), ('CSEAIML', 'Computer Science and Engineering (AI/ML)'), ('CSEDS', 'Computer Science and Engineering (Data Science)'), ('IT', 'Information Technology'), ('CS', 'Computer Science'), ('AIML', 'Artificial Intelligence and Machine Learning'), ('CSIT', 'Computer Science and Information Technology'), ('EN', 'Electrical And Electronics Engineering'), ('CSEH', 'Computer Science and Engineering (Hindi)')], max_length=8)),
                ('is_department_head', models.BooleanField(default=False)),
                ('courses', models.ManyToManyField(to='accounts.Course')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('profile_picture', models.URLField(blank=True, null=True)),
                ('is_department_head', models.BooleanField(default=False)),
                ('is_faculty', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
